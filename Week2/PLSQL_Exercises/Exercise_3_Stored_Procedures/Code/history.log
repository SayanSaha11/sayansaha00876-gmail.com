20d9e65e-0c7b-4403-98c6-19f89ddf88fa:1750507142187:13:S:INSERT INTO Customers VALUES (1, 'John Doe', TO_DATE('1960-05-15', 'YYYY-MM-DD'), 5000, SYSDATE);
874360b7-d6b0-487e-be42-c3bb113f8b47:1750507142902:15:S:INSERT INTO Customers VALUES (2, 'Jane Smith', TO_DATE('1985-07-20', 'YYYY-MM-DD'), 15000, SYSDATE);
9d0d3773-8d85-491c-88a6-65d0da4b2a22:1750507143601:9:S:INSERT INTO Accounts VALUES (1, 1, 'Savings', 2000, SYSDATE);
8941b1ea-e9b3-4496-9764-1ef77742b259:1750507143901:7:S:INSERT INTO Accounts VALUES (2, 2, 'Savings', 10000, SYSDATE);
41566396-4566-4794-ad97-2875db40a25d:1750507144414:4:S:INSERT INTO Accounts VALUES (3, 2, 'Checking', 500, SYSDATE); -- For fund transfer
fd0b2bad-a141-411c-af49-33e42690f5fd:1750507144887:13:S:INSERT INTO Transactions VALUES (1, 1, SYSDATE, 500, 'Deposit');
c797e084-6ca1-4cbd-854d-cdd000e927cd:1750507145252:7:S:INSERT INTO Transactions VALUES (2, 2, SYSDATE, 1000, 'Withdrawal');
0c334ab7-7d74-466d-8344-9a4990374209:1750507145826:8:S:INSERT INTO Loans VALUES (1, 1, 10000, 6.5, SYSDATE, ADD_MONTHS(SYSDATE, 60));
a0e6a9af-977f-4baa-ac5e-dc5250b3c807:1750507146329:6:S:INSERT INTO Loans VALUES (2, 2, 8000, 5.0, SYSDATE, ADD_MONTHS(SYSDATE, 20));
84258198-8339-4906-b992-932920247f46:1750507147241:6:S:INSERT INTO Employees VALUES (1, 'Alice Johnson', 'Manager', 70000, 'HR', TO_DATE('2015-06-15', 'YYYY-MM-DD'));
c981ef1b-b6ab-44f0-9746-950657f55d2a:1750507147783:10:S:INSERT INTO Employees VALUES (2, 'Bob Brown', 'Developer', 60000, 'IT', TO_DATE('2017-03-20', 'YYYY-MM-DD'));
01b84698-d9e5-46fb-83e5-5a47f3121a48:1750507147994:20:S:COMMIT;
9db7a74e-8ab1-42e8-bd8b-ad3041f77f64:1750507265834:843:S:CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest IS\nBEGIN\n  FOR acc IN (SELECT AccountID, Balance \n              FROM Accounts \n              WHERE AccountType = 'Savings') LOOP\n\n    UPDATE Accounts\n    SET Balance = Balance + (Balance * 0.01),\n        LastModified = SYSDATE\n    WHERE AccountID = acc.AccountID;\n\n  END LOOP;\n\n  DBMS_OUTPUT.PUT_LINE('Monthly interest applied to all savings accounts.');\n  COMMIT;\nEND;\n/
65364aa9-ef8a-4437-a049-a88f07523485:1750507310899:238:S:CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus (\n  p_department IN VARCHAR2,\n  p_bonus_pct IN NUMBER\n) IS\n  v_count NUMBER := 0;\nBEGIN\n  FOR emp IN (SELECT EmployeeID, Salary \n              FROM Employees \n              WHERE Department = p_department) LOOP\n\n    UPDATE Employees\n    SET Salary = Salary + (Salary * p_bonus_pct / 100),\n        HireDate = HireDate  -- Dummy update to trigger LastModified if needed\n    WHERE EmployeeID = emp.EmployeeID;\n\n    v_count := v_count + 1;\n  END LOOP;\n\n  DBMS_OUTPUT.PUT_LINE(v_count || ' employee(s) updated with bonus in department: ' || p_department);\n  COMMIT;\nEND;\n/
abd2b814-4746-447b-b060-26555096407c:1750507421568:137:S:CREATE OR REPLACE PROCEDURE TransferFunds (\n  p_from_account IN NUMBER,\n  p_to_account IN NUMBER,\n  p_amount IN NUMBER\n) IS\n  v_balance NUMBER;\nBEGIN\n  -- Check if source account has enough balance\n  SELECT Balance INTO v_balance\n  FROM Accounts\n  WHERE AccountID = p_from_account\n  FOR UPDATE;\n\n  IF v_balance < p_amount THEN\n    RAISE_APPLICATION_ERROR(-20001, 'Insufficient balance in source account.');\n  END IF;\n\n  -- Deduct from source\n  UPDATE Accounts\n  SET Balance = Balance - p_amount,\n      LastModified = SYSDATE\n  WHERE AccountID = p_from_account;\n\n  -- Credit to destination\n  UPDATE Accounts\n  SET Balance = Balance + p_amount,\n      LastModified = SYSDATE\n  WHERE AccountID = p_to_account;\n\n  DBMS_OUTPUT.PUT_LINE('Transfer of ' || p_amount || ' from account ' || p_from_account || ' to account ' || p_to_account || ' completed.');\n\n  COMMIT;\nEND;\n/
0f0affc2-5cfb-41db-8349-792c3067d060:1750507461791:30:S:EXEC ProcessMonthlyInterest;
e82d81d5-b74f-4b26-9eb7-edb01edd825d:1750507474607:99:S:EXEC UpdateEmployeeBonus('HR', 10);
4936ea15-5a59-458c-8b74-1079373dc8ec:1750507487751:15:S:EXEC TransferFunds(1, 2, 500);
